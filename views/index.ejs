<!DOCTYPE html>
<html>

<head>
	<title>RatterScanner | Scan</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<meta name="theme-color" content="#000000">
	<link rel="icon" href="https://ratterscanner.com/favicon.ico">
	<link rel="manifest" href="https://ratterscanner.com/manifest.json">
	<link rel="apple-touch-icon" href="https://ratterscanner.com/logo192.png">
	<script src="https://cdn.jsdelivr.net/npm/crypto-js@4.1.1/crypto-js.min.js"></script>

	<meta property="og:type" content="website">
	<meta property="og:site_name" content="RatterScanner | Scan">
	<meta property="og:description" content="Scan a file or view a report details using its ID.">
	<meta property="og:color" content="#ffffff">

	<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?compat=recaptcha" async defer></script>

	<style>
		/* Move this into a CSS file at some point, this is getting too big */
		body {
			font-family: Arial, sans-serif;
			background-color: #111827;
			height: 100%;
			margin: 0;
		}

		.loadingContainer {
			display: flex;
			justify-content: center;
			align-items: center;
			color: white;
		}

		.container {
			max-width: 400px;
			margin: 40px auto;
			padding: 20px;
			background-color: #1f2937;
			border-radius: 10px;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		}

		.input-group {
			margin-bottom: 20px;
		}

		.input-group label {
			display: block;
			margin-bottom: 10px;
			color: #fff;
		}

		.input-group input[type="file"] {
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			color: #fff;
			width: 100%;
			box-sizing: border-box;
		}

		.input-group input[type="text"] {
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			color: #000000;
			width: 100%;
			box-sizing: border-box;
		}

		.input-group input[type="file"]:focus,
		.input-group input[type="text"]:focus {
			border-color: #337ab7;
			box-shadow: 0 0 10px rgba(51, 122, 187, 0.5);
		}

		.button {
			background-color: #337ab7;
			color: #fff;
			padding: 10px 20px;
			border: none;
			border-radius: 5px;
			cursor: pointer;
			text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
		}

		.button:hover {
			background-color: #23527c;
		}

		.white {
			color: #fff;
		}

		.dark-blue {
			color: #23527c;
		}
	</style>
	<script>
		let res;
		let submitted = false;

		async function checkForm() {
			if (submitted) {
				return; // The user has already pressed the submit button
			}
			let fileInput = document.getElementById("file");
			let textInput = document.getElementById("text");
			submitted = true;

			if (fileInput.files.length > 0 && textInput.value !== "") {
				alert("You cannot upload a file and check an ID at the same time");
				submitted = false;
			} else if (fileInput.files.length > 0) {
				// ----------------------------------------
				const resultDiv = document.getElementById("status");
				try {
					const response = await fetch("/upload", {
						method: "POST",
						headers: {
							"Content-Type": "application/json"
						},
					});

					resultDiv.innerText = "Validating";
					if (response.status === 401) {
						document.getElementById("loadingContainer").innerHTML = '<img src="mistLoding.gif" alt="">';

						const challengeResponse = await response.json();
						const challenge = challengeResponse.WWW_Authenticate.challenge;
						const salt = challenge.salt;
						const maxNumber = challenge.maxnumber;
						const algorithm = challenge.algorithm;
						const id = challengeResponse.ID;

						let solution;
						for (let i = 0; i < maxNumber; i++) {
							const concatenatedString = salt + i.toString();
							const hash = CryptoJS.SHA256(concatenatedString);
							const hashedString = hash.toString(CryptoJS.enc.Hex);

							if (hashedString === challenge.challenge) {
								solution = i;
								break;
							}
						}

						if (solution !== undefined) {
							const authData = {
								id: id,
								solution: solution,
								salt: salt,
								challenge: challenge.challenge,
							};

							const authHeader = `Altcha ${btoa(JSON.stringify(authData))}`;
							const response = grecaptcha.getResponse();
							const formData = new FormData();
							formData.append("jarFile", fileInput.files[0]);
							formData.append("g-recaptcha-response", response)

							const controller = new AbortController();
							const signal = controller.signal;

							// Set a timeout of 1 minute
							const timeoutId = setTimeout(() => {
								controller.abort();
								alert("Request timed out");
								window.location.reload();
								document.getElementById("loadingContainer").innerHTML = '<img src="" alt="">';
								submitted = false; // Reset submitted here
							}, 60000);

							fetch("/upload", {
									method: "POST",
									headers: {
										"Authorization": authHeader,
									},
									body: formData,
									signal
								})
								.then(response => response.json()) // parse the response body as JSON
								.then(data => {
									clearTimeout(timeoutId);
									if (!(data.message.includes("Jar file uploaded successfully") || data.message.includes("File is safe"))) {
										alert(data.message);
										resultDiv.innerText = "Validating";
										document.getElementById("loadingContainer").innerHTML = '<img src="" alt="">';
									} else if (data.message.includes("File is safe")) {
										const sendData = {
											fileName: data.fileName,
											fileDownload: data.download
										};
										const queryString = `?data=${encodeURIComponent(JSON.stringify(sendData))}`;
										window.location.href = `/safe${queryString}`;
									} else if (data.message.includes("File is malicious")) {
										const sendData = {
											fileName: data.fileName,
										};
										const queryString = `?data=${encodeURIComponent(JSON.stringify(sendData))}`;
										window.location.href = `/malicious${queryString}`;
									} else {
										const appID = data.appID;
										window.location.href = "/report?appID=" + appID + "&downloads=" + data.downloads;
									}
								})
								.catch(error => {
									if (error.name === 'AbortError') {
										console.log('Request was aborted');
									} else {
										console.error(error);
									}
									submitted = false;
								})
								.finally(() => {
									submitted = false;
								});
						} else {
							resultDiv.innerText = "Failed to find solution";
						}
					} else {
						resultDiv.innerText = 'Failed to get challenge';
					}
				} catch (error) {
					resultDiv.innerText = 'Error: ' + error.message;
				}

				// ----------------------------------------
			} else if (textInput.value == "") {
				alert("You must supply a file or an ID")
				submitted = false;
			} else if (textInput.value !== "") {
				window.location.href = "/report?appID=" + textInput.value;
			}
		}

		function clearFileInput() {
			document.getElementById('file').value = '';
		}

		async function sha256(message) {
			const encoder = new TextEncoder();
			const encodedMessage = encoder.encode(message);
			const hashBuffer = await crypto.subtle.digest('SHA-256', encodedMessage);
			const hashArray = Array.from(new Uint8Array(hashBuffer));
			const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
			return hashHex;
		}

		async function hmacSha256(message, key) {
			const encoder = new TextEncoder();
			const encodedMessage = encoder.encode(message);
			const encodedKey = encoder.encode(key);

			const cryptoKey = await crypto.subtle.importKey(
				"raw",
				encodedKey, {
					name: "HMAC",
					hash: "SHA-256"
				},
				true,
				["sign"]
			);

			const hmacBuffer = await crypto.subtle.sign("HMAC", cryptoKey, encodedMessage);
			const hmacArray = Array.from(new Uint8Array(hmacBuffer));
			const hmacHex = hmacArray.map(byte => byte.toString(16).padStart(2, '0')).join('');
			return hmacHex;
		}
	</script>

	<style>
		body {
			margin-top: 8px;
		}

		#footer {
			position: relative;
			text-align: center;
			/*padding: 10px;*/
			padding-bottom: 10px;
			padding-top: 10px;
			width: 100%;
			bottom: 0px;
			left: 0px;
		}

		#footer>div {
			display: inline-block;
			margin-bottom: 0.5rem;
		}

		#footer>div>* {
			display: inline;
		}

		.text-gray-300 {
			color: #d1d5db;
		}

		.text-gray-300:hover {
			color: #ffffff;
		}

		.mx-2 {
			margin-left: 0.5rem;
			margin-right: 0.5rem;
		}

		.text-gray-500 {
			color: #737373;
		}

		.text-sm {
			font-size: 0.875rem;
		}
	</style>
</head>

<body>
	<main id="root">
		<div class="container">
			<h2 class="white">Upload a file or view an ID</h2>
			<form onsubmit="return false;">
				<div class="input-group">
					<label for="file" style="color: #fff;">Select a file:</label>
					<input type="file" id="file" name="file" accept=".jar">
					<button type="button" onclick="clearFileInput()">Clear file</button>
					<!--This needs to look a lot better, but works for now-->
				</div>
				<div class="white">
					<div class="g-recaptcha" data-sitekey=<%= locals.siteKey %>></div>
				</div>
				<div class="input-group">
					<label for="text" style="color: #fff;">Enter an ID:</label>
					<input type="text" id="text" name="text">
				</div>
				<button class="button dark-blue" style="color: #fff;" onclick="checkForm()">Submit</button>
			</form>
		</div>
		<div class="loadingContainer" id="status"></div>
		<div class="loadingContainer" id="loadingContainer"></div>
	</main>

	<footer id="footer">
		<div>
			<a href="https://ratterscanner.com/terms" class="text-gray-300 hover:text-white mx-2">Terms and Conditions</a>
			<span class="text-gray-500">|</span><a href="https://ratterscanner.com/privacy" class="text-gray-300 hover:text-white mx-2">Privacy Policy</a>
		</div>
		<p class="text-gray-500 text-sm">Â© 2024 RatterScanner. All rights reserved.</p>
	</footer>
	<script>
		const body = document.getElementById('root')
		var height = (document.getElementById('footer').offsetHeight + 8) + "px"
		/*body.style.marginBottom = height*/
		body.style.minHeight = `calc(100vh - ${height} - 8px)`
	</script>
</body>

</html>